# -*- coding: utf-8 -*-
"""Email Spam or Not Spam (Using Neural Net Text Classifier).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GtHvVP-0XrYTHdH4danS2DmoEvMOBMFH

#PREREQUISITES
"""

from google.colab import drive
drive.mount("/content/drive")

"""***Importing Important Libraries***"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
import tensorflow_hub as hub
from sklearn.feature_extraction.text import TfidfVectorizer

from wordcloud import WordCloud

"""#DATA PRE-PROCESSING

***Importing Data***
"""

path = "/content/drive/MyDrive/Data Sets/mail_data.csv"
df = pd.read_csv(path, encoding='unicode_escape')

df.info()

df.head()

df.shape

#df.dropna()

"""***Data Cleaning***"""

#checking duplicate entries
df.duplicated().sum()

#removing duplicate entries
df = df.drop_duplicates(keep='first')

df.duplicated().sum()

df.shape

"""***Data Encording***


*   Ham (Not Spam) -> 0
*   Spam -> 1

**Note:** *New Col 'label (Target)' is created for categories (ham,spam)*
"""

df["label"] = (df.Category == "spam").astype(int)
# df[['Message', 'label']]
df

"""***Shuffel Data Frame***"""

df = df.sample(frac = 1)

"""***Data Visualization***

*Pie Chart Visualisation of Over all Data Set*
"""

plt.pie(df['label'].value_counts(), labels=["Not Spam", "Spam"], autopct = "%0.2f")
plt.show()

"""*Word Colud Visualisation*"""

wc = WordCloud(width=500,height=500,min_font_size=10,background_color='#FFFDD7')

#Word Cloud Representation for Spam Words
spam_wc = wc.generate(df[df['label'] == 1]['Message'].str.cat(sep=" "))
plt.figure(figsize=(15,6))
plt.imshow(spam_wc)

#Word Cloud Representation for Ham Words
ham_wc = wc.generate(df[df['label'] == 0]['Message'].str.cat(sep=" "))
plt.figure(figsize=(15,6))
plt.imshow(ham_wc)

"""***Splitting Data Set into traning, test and validation data set***"""

#df.sample -> draw random sample 80% for traning ; 10% for validation ; 10% for testing
train, test, valid = np.split(df.sample(frac = 1), [int(0.8*len(df)), int(0.9*len(df))])

len(train), len(valid), len(test)

""" **Converting Dataframe to Tensorflow Dataset object**

*   *Takes a DataFrame 'dataframe' as input and returns a TensorFlow Dataset object*



"""

def df_to_dataset(dataframe, shuffle = True, batch_size = 150):
  df = dataframe.copy()
  labels = df.pop('label') #target
  df = df["Message"]
  ds = tf.data.Dataset.from_tensor_slices((df, labels))
  if shuffle:
    ds = ds.shuffle(buffer_size = len(dataframe)) #shuffle data set
  ds = ds.batch(batch_size) #batch data sets
  ds = ds.prefetch(tf.data.AUTOTUNE)
  return ds

train_data = df_to_dataset(train)
valid_data = df_to_dataset(valid)
test_data = df_to_dataset(test)

list(train_data)[0]

"""#EMBEDDING + MODEL

***Text Embedding***
"""

#transforming our text into numbers
embedding = "https://tfhub.dev/google/nnlm-en-dim50/2"
hub_layer = hub.KerasLayer(embedding, dtype=tf.string, input_shape=[], output_shape=[50], trainable=True)

hub_layer(list(train_data)[0][0])

"""***Model Buliding***

*Model Architecture*

*   *Forward Feed Neural Net with two 'Hidden Layers' and 'Output Layer'*
"""

model = tf.keras.Sequential([
    hub_layer,
    tf.keras.layers.Dense(units = 20, activation = 'relu', name = "hidden_layer_1"),
    tf.keras.layers.Dense(units = 5, activation = 'relu', name = "hidden_layer_2"),
    tf.keras.layers.Dense(units = 1, activation = 'sigmoid', name = "output_layer")
])

"""*Configuring/ Compile Model*"""

model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
    loss=tf.keras.losses.BinaryCrossentropy(),
    metrics=['accuracy']
  )

"""*Checking Model Accuracy On Untrained Model*"""

model.evaluate(train_data)

"""***Model Summary***"""

model.summary()

"""*Model Traning on "train_data" Data Set*"""

history = model.fit(train_data, epochs = 10, validation_data = valid_data)

"""**Visualize Accuracy**
*   *Traning accuracy and Validation accuracy increases very well*
"""

plt.plot(history.history['accuracy'], label = "Training accuracy")
plt.plot(history.history['val_accuracy'], label = "Validation accuracy")
plt.title("Accuracy of model")
plt.ylabel("Accuracy")
plt.xlabel("Epoch")
plt.legend()
plt.show()

"""**Visualize loss**
*   *Traning Loss and Validation Loss decreases very well*
"""

plt.plot(history.history['loss'], label = "Training loss")
plt.plot(history.history['val_loss'], label = "Validation loss")
plt.title("Accuracy of model")
plt.ylabel("Accuracy")
plt.xlabel("Epoch")
plt.legend()
plt.show()

"""**Model Performance**

*   *On Traning Data Set(train_data)*
*   *On Validation Data Set(valid_data)*
*   *On Testing Data Set(test_data)*

*Both data sets are new for model (not seen by model before)*

"""

model.evaluate(train_data)

model.evaluate(valid_data)

model.evaluate(test_data)

"""***Testing Based On User Input***"""

#Taking input mail from user in form of text
#Spam Mail example
# input_mail = ["We've detected suspicious activity on your account. Please log in immediately to verify your identity and secure your account. Failure to do so may result in account suspension."]
# input_mail = ["Make easy money from home! Join our exclusive program and start earning thousands of dollars every week. No experience required. Sign up now and take control of your financial future!"]
# input_mail = ["You've been selected as a winner of our exclusive giveaway! Claim your free iPhone X now by clicking the link below"]
# input_mail = ["Congratulations! You've been selected as the lucky winner of a free vacation to the destination of your choice. Claim your prize now by clicking the link below."] #Spam Mail

#Ham Mail example
# input_mail = ["You're invited to my birthday party this Friday evening at my place. Join us for food, drinks, and fun celebrations! Please RSVP by Thursday if you can make it."]
# input_mail = ["Just checking in to see how you're doing. It's been a while since we last caught up, and I'd love to hear what's new with you. Let's schedule a time to grab coffee or hop on a call soon!"]
# input_mail = ["Please find attached invoice #4562 for the services rendered in March. We appreciate your prompt payment."]
# input_mail = ["Dear friends,I'm hosting a dinner party at my place this Friday evening. It would be wonderful to have you join us for a delicious meal and great conversation. Please RSVP by Wednesday if you can make it. Looking forward to seeing you!"] #Ham Mail

#Convert input_mail to tensor()
input_data_tensor = tf.constant(input_mail)

#Predict using our trained model
prediction = model.predict(input_data_tensor)

#Output the prediction category
if prediction[0] > 0.5:
    print(f"Spam Mail")
else:
    print(f"Ham Mail")